module.exports=(async()=>{let e=null,t=0,r=0,i=0,n=t=>{if(e)try{t(e)}catch(t){console.log(t),e=null}if(!e)throw"twim encoder is broken"},l="invalid argument";return await(async()=>{let t=Uint32Array.of(1836278016,1,1610679297,33751040,201981953,1090521601,4244652288,186259985),r=(WebAssembly.validate(t.buffer)?"simd-":"")+"twim.wasm",i=require("path").resolve(__dirname,r),n=require("fs").readFileSync(i),l={debugInt:e=>{console.log("i "+e)},debugFloat:e=>{console.log("f "+e)}},a=await WebAssembly.instantiate(n,{env:l});(e=a.instance.exports)._initialize()})(),{setTargetSize:e=>{t=0|e},setVariants:e=>{let t=0|e.length;if(i=t,!t)throw l;let a=new Uint8Array(10*t);for(let r=0;r<t;++r){let t=e[r],i=10*r;a[i+0]=255&t.partitionCode,a[i+1]=t.partitionCode>>8,a[i+2]=t.lineLimit;let n=t.colorOptions,o=0|n.length;if(!o)throw l;for(let e=0;e<o;++e){let t=n[e];if(!(t>=0&&t<49))throw l;a[i+3+(t>>3)]|=1<<(7&t)}}n(e=>{r&&e.free(r),r=e.malloc(10*t),new Uint8Array(e.memory.buffer).set(a,r)})},encodeImage:e=>{let l={mse:0,data:null},a=0|e.width,o=0|e.height;return t<4||!i||a<8||o<8?l:(n(n=>{let s=n.malloc(a*o*4);new Uint8Array(n.memory.buffer).set(e.rgba,s);let m=n.twimEncode(a,o,s,t,i,r);if(m){let e=n.memory.buffer,t=new Uint32Array(e)[m>>2];l.mse=new Float32Array(e)[m+4>>2],l.data=Uint8Array.from(new Uint8Array(e,m+8,t)),n.free(m)}}),l)}}});